在`build/base.config.js`文件中,

服务端不部分接口(多密码412)情况, 携带问题showcase 提测, 导致测试报了一些bug; 风险评估没有详细.

单点场景的自测如何完全解决.....

提测前, 保证规定范围内的流程都验证完毕 ( 场景必须要验证一遍 )
如果没有经过自测阶段, 禁止执行下一步.
如果有未完成的内容报备,向产品经理报告

当对一个改进中, 出现了"严格", "认真"等形容词的描述, 这种描述一定是不靠谱的


意见:
	1 测试: 时间存在问题, 只测试修改的内容, 其他内容没有回归到, 没有确定修改影响范围.
		1. 不要卡节点, 如何明确测试时间? 自测时间;
		2. 明确列出测试范围 checklist / 每天show出计划 ;;
		3. 从问题的难易程度分析解决问题, 遇到难处理的问题可以暂时性放弃
	2 对于部分用到的技术需要做集中化的培训. 例如git合并讲解, 分支策略讲解, 节点对比讲解;
	3 接口文档变动和接口变动需要周知. server端更改带给web端工作量, 影响较小; 真正联调阶段才会出各类bug.
		 出现没有周知的情况. 接口文档不一致.
	4 本地模拟数据不能无缝衔接到正式的接口. 可以培训, 可以出文档
	5 环境支持较差, 没有满足联调和测试环境
	6 bug有时候没有任何思路
	7 联调之前的自测工作不够, 如何解决这个问题;  经验/手段/提前解决问题

	工作节点和标准提前做出来, 将所有的工作进行前置, 如何达到质量标准 ; 计划 flow up

	前松后紧, 节点都挤在一起, 导致问题延后暴露

	太过投入开发, 没办法跳出逻辑去审视流程和代码等内容

对技能的要求:  git    api/mock/vue技能

流程把控
交叉测试
测试留痕
概要设计和详细设计可以解决的问题


在进入下阶段之前, 检查是否具备下一阶段的条件;;;;; 升级沟通

业务流程梳理阶段
设计阶段; 通过详细设计确认需要做的事情
计划(开发)阶段: 明确小节点, 小节点+检查点;; 提前明确检查点要求(质量)
联调阶段
集成测试阶段: 添加交叉测试/测试工作留痕(自测工作量评估 => 为了评估后续的改动自测)

留一天进行: 自查.多语言.兼容性

做计划的时候, 明确一下合并质量要求

大巴三期 > 信创


