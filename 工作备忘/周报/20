【周报】岳鹏飞 2022/4/15

<fe@lenovocloud.com>;
xuyb@lenovocloud.com;<wangzy@lenovocloud.com>;<yuanlei@lenovocloud.com>;

本周工作内容
    1. 解决大巴三期一轮提测模块的遗留问题
    2. code review
    3. 大巴三期问题汇总
    4. 处理大巴三期PCS工单

下周工作安排
    1. 大巴三期-多密码联调/同步盘联调/文案优化修改
    2. 复盘大巴三期一轮提测问题
    3. 在二轮提测中添加部分原子权限更改

思考体会
    关于代码中的注释, review了大量的项目代码, 发现很多注释的内容都存在一些问题, 我们目前也没有明确的规定.
    我觉得注释的作用就是帮助阅读者快速理解, 跳过梳理代码的过程.
    之前一直觉得优秀的代码是不需要注释的,如果参与的开发者对业务和架构都比较熟悉,就算需要临时梳理,也没什么太大的问题. 但是实践起来还是有一点点困难,涉及到熟练度和经验等方面. 随着业务场景的丰富,代码量的增加,如果不加以优化、维护,好的代码也会慢慢的变坏. 例如,在排查问题时,一定会涉及到代码review.如果代码中存在结构复杂,不够清晰,命名规范性较差,阅读理解挑战性就很大.如果在关键的节点加以注释,那么代码的阅读理解就会更加简单,更加容易理解.
    下午在做大巴三期代码review时, 就出现了一个典型的场景: 父组件和子组件一起操作分页数据,父组件负责请求,子组件负责渲染, 然后列表数据和相关变量在父子组件之间传递. 这个场景就是业务复杂, 逻辑混乱, 命名不规范. 在这个场景下, 注释的价值就体现出来了, 可以更好的帮助阅读者理解某些复杂的逻辑和特殊的场景. (整理结构效果会更优)
    我在开发中用到的注释有这几个场景:
    1. 方法描述
    2. 预留的坑位
    3. 解释难梳理的场景
    4. 解释容易混淆的内容

    简单的结构 ≫ 规范化的命名 ≫ 注释
    好的注释更有利于团队的协作和代码维护.

其他周知事项
    无
