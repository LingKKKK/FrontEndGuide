【周报】岳鹏飞 2021/12/10

本周工作内容
    - 阅读公有/私有doc_preview代码, 了解预览的思路和技术方案
    - 阅读文件密级的需求、交互、UI, 阅读相关项目的代码
    - 解决Mac系统中Fork commit代码, 会跳过git-hook的问题
      wiki: https://wiki.lenovows.com/pages/viewpage.action?pageId=29295425
    - PCSONLINE-1893、PCSONLINE-2054
    - review代码

下周工作安排
    - 阅读代码
    - 熟悉项目

思考体会
  1. 书写规范
     在项目中, 对于没有严格约束的内容, 每个人都有自己的写法.
     拿私有web项目来说, php代码中有很多函数书写不规范(大小写, 空格等):
       header("Location: /H5")
       header("location:/H5")
     因为团队人员较多, 每个人都可能会去修改项目中的代码, 我觉得写代码的时候, 首先按照团队规范书写, 对于没有书写要求的内容, 尽量参照之前同事的写法, 保持写法和之前的一致. 方便其他同事阅读和修改.
  2. CI/CD
     之前没有接触过完整的CI/CD流程, 大多数都是手动处理的. 对我们项目的CI/CD流程比较感兴趣, 也尝试的进行搭建, 整理了一写知识点和操作流程
     https://wiki.lenovows.com/pages/viewpage.action?pageId=29295904


  1. 对review流程的认知:
     规则 + 约束
     对review的理解, 对团队来说, 减少错误的概率, 换一种思维去审查代码, 可能发现一些问题; 对个人说, review算是一个查漏补缺的过程, 想要正确的review必须知晓代码的写法和实现原理, 对review人员有一定的要求, 应该尽可能严格的要求review标准. 在保证功能的前提下, 将团队代码质量再提升一个档次, 尽量避免出现冗余, 无意义的代码, 尽量使用更好的写法和实现方法, 互相学习互相提升.
     review代码需要细心一点, 优先review更改代码的逻辑写法, 再拓展到这个文件中其他部分的代码(冗余代码, console)

     自己写代码的时候,也需要按照这种标准进行约束, 每次提交之前自己先review, 通过之后再提交

     在协同开发的时候, 在同一个功能的不同项目下, 需要对文件的命名, 变量的命名进行统一, 需要让用户, 让其他开发者阅读代码的时候能理解其意义, 不能自己随意的命名, 以后自己在看代码都可能忘记
  3. 对注释代码的统一删除, console方法还有点用, 注释的代码build的时候, 可以完全舍弃掉了, 引用webpack插件可以进行处理.
  4. review代码的时候发现,我们虽然有规范,但是并未严格按照规范去命名文件夹/文件.

其他周知事项
    无任何变动

  对外部组件的引用, 尽量将官方文档没有的api写出来, 把思路和流程简单描述一下, 方便排查问题
